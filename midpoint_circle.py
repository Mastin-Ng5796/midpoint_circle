# -*- coding: utf-8 -*-
"""midpoint_circle.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DtygnHQUAdiqh_qFOLeIKoaa_jpwJiN6
"""

##!pip3 install ColabTurtle

import numpy as np
import matplotlib.pyplot as plt
### Data input
x_cent = 0
y_cent = 0
r = 100
#### Mid-Point Circle Drawing Algorithm ####
### Initializations
x_quad1 = []
y_quad1 = []
decor = []
### Step 01
x_init = 0
y_init = r
### Step 02
decision_parameter = 1 - r
### Step 03: First octant
x = x_init
y = y_init
p = decision_parameter
while(x < y):
    x_quad1.append(x)
    y_quad1.append(y)
    if p < 0:
        x += 1
        p += 1 + 2 * x
    else:
        x += 1
        y -= 1
        p += 1 - 2 * y + 2 * x
# append the final point
x_quad1.append(x)
y_quad1.append(y)
# append the second octant to the first quadrant
for i in range(len(x_quad1)):
    x_quad1.append(y_quad1[i])
    y_quad1.append(x_quad1[i])
# Second Quadrant, WRT center coordinates
x_quad2 = [(x_cent - x) for x in x_quad1]
y_quad2 = [(y_cent + y) for y in y_quad1]
# Third Quadrant, WRT center coordinates
x_quad3 = [(x_cent - x) for x in x_quad1]
y_quad3 = [(y_cent - y) for y in y_quad1]
# Fourth Quadrant, WRT center coordinates
x_quad4 = [(x_cent + x) for x in x_quad1]
y_quad4 = [(y_cent - y) for y in y_quad1]
# First Quadrant, WRT center coordinates
x_quad1 = [(x_cent + x) for x in x_quad1]
y_quad1 = [(y_cent + y) for y in y_quad1]
# transform coordinates into a numpy array and print them out
x_quad1 = np.array(x_quad1, dtype = int)
y_quad1 = np.array(y_quad1, dtype = int)
x_quad2 = np.array(x_quad2, dtype = int)
y_quad2 = np.array(y_quad2, dtype = int)
x_quad3 = np.array(x_quad3, dtype = int)
y_quad3 = np.array(y_quad3, dtype = int)
x_quad4 = np.array(x_quad4, dtype = int)
y_quad4 = np.array(y_quad4, dtype = int)
print(np.vstack((x_quad1, y_quad1, x_quad2, y_quad2, 
                 x_quad3, y_quad3, x_quad4, y_quad4)).T)
### Step 04
fig = plt.figure()
ax = fig.add_subplot(111)
plt.plot(x_quad1, y_quad1, x_quad2, y_quad2, x_quad3, y_quad3, x_quad4, y_quad4)
ax.set_aspect('equal', adjustable='box')
plt.title("Bresenham Circle Drawing Algorithm")
plt.xlabel("x-axis")
plt.ylabel("y-axis")
plt.show()

# Python3 program for implementing
# Mid-Point Circle Drawing Algorithm
import numpy as np
import matplotlib.pyplot as plt
def midPointCircleDraw(x_centre, y_centre, r):
	x = r
	y = 0
	
	# Printing the initial point the
	# axes after translation
	print("(", x + x_centre, ", ",
			y + y_centre, ")",
			sep = "", end = "")
	
	# When radius is zero only a single
	# point be printed
	if (r > 0) :
	
		print("(", x + x_centre, ", ",
				-y + y_centre, ")",
				sep = "", end = "")
		print("(", y + x_centre, ", ",
				x + y_centre, ")",
				sep = "", end = "")
		print("(", -y + x_centre, ", ",
					x + y_centre, ")", sep = "")
	
	# Initialising the value of P
	P = 1 - r

	while x > y:
	
		y += 1
		
		# Mid-point inside or on the perimeter
		if P <= 0:
			P = P + 2 * y + 1
			
		# Mid-point outside the perimeter
		else:		
			x -= 1
			P = P + 2 * y - 2 * x + 1
		
		# All the perimeter points have
		# already been printed
		if (x < y):
			break
		
		# Printing the generated point its reflection
		# in the other octants after translation
		print("(", x + x_centre, ", ", y + y_centre,
							")", sep = "", end = "")
		print("(", -x + x_centre, ", ", y + y_centre,
							")", sep = "", end = "")
		print("(", x + x_centre, ", ", -y + y_centre,
							")", sep = "", end = "")
		print("(", -x + x_centre, ", ", -y + y_centre,
										")", sep = "")
		
		# If the generated point on the line x = y then
		# the perimeter points have already been printed
		if x != y:
		
			print("(", y + x_centre, ", ", x + y_centre,
								")", sep = "", end = "")
			print("(", -y + x_centre, ", ", x + y_centre,
								")", sep = "", end = "")
			print("(", y + x_centre, ", ", -x + y_centre,
								")", sep = "", end = "")
			print("(", -y + x_centre, ", ", -x + y_centre,
											")", sep = "")
							
# Driver Code
if __name__ == '__main__':
	
	# To draw a circle of radius 3
	# centered at (0, 0)
	midPointCircleDraw(0, 0, 10)


# Contributed by: SHUBHAMSINGH10
# Improved by: siddharthx_07
